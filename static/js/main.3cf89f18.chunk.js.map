{"version":3,"sources":["Break.js","Session.js","Timer.js","App.js","serviceWorker.js","index.js"],"names":["Break","breakValue","breakDown","breakUp","id","onClick","Session","sessionValue","sessionDown","sessionUp","Timer","title","timerValueMins","timerValueSecs","startStop","startStopText","reset","src","App","useState","breakLength","setBreakLength","sessionLength","setSessionLength","timerLengthMins","setTimerLengthMins","timerLengthSecs","setTimerLengthSecs","activeCountdown","setActiveCountDown","sessionOrBreak","setSessionOrBreak","audio","document","getElementById","useEffect","interval","toString","padStart","play","setInterval","x","clearInterval","className","pause","currentTime","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3cf89f18.chunk.js","sourcesContent":["import React from 'react';\n\nconst Break = ({ breakValue, breakDown, breakUp }) => {\n    return (\n        <div id=\"break-label\">\n          <h3>Break</h3>\n          <h4 id=\"break-length\">{breakValue}</h4>\n          <button id=\"break-decrement\" onClick={breakDown}>-</button>\n          <button id=\"break-increment\" onClick={breakUp}>+</button>\n        </div>\n    )\n  }\n\nexport default Break;","import React from 'react';\n\nconst Session = ({ sessionValue, sessionDown, sessionUp }) => {\n    return (\n        <div id=\"session-label\">\n          <h3>Session</h3>\n          <h4 id=\"session-length\">{sessionValue}</h4>\n          <button id=\"session-decrement\" onClick={sessionDown}>-</button>\n          <button id=\"session-increment\" onClick={sessionUp}>+</button>\n       </div>\n    ) \n  }\n\n  export default Session;\n  ","import React from 'react';\n\nconst Timer = ({title, timerValueMins, timerValueSecs, startStop, startStopText, reset }) => {\n    return (\n       <div id=\"timer-label\">\n          <h2>{title}</h2>\n          <h4 id=\"time-left\">{timerValueMins}:{timerValueSecs}</h4>\n          <button id=\"start_stop\" onClick={startStop}>{startStopText}</button>\n          <button id=\"reset\" onClick={reset}>Reset</button>\n          <audio id=\"beep\" src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"></audio>\n       </div>\n    )\n  }\n\n  export default Timer;","import React, {useState, useEffect} from 'react';\nimport Break from './Break';\nimport Session from './Session';\nimport Timer from './Timer';\nimport './App.css';\n\nconst App = () => {\n  const [breakLength, setBreakLength] = useState(5);\n  const [sessionLength, setSessionLength] = useState(25);\n  const [timerLengthMins, setTimerLengthMins] = useState(25);\n  const [timerLengthSecs, setTimerLengthSecs] = useState(\"00\");\n  const [activeCountdown, setActiveCountDown] = useState(false);\n  const [sessionOrBreak, setSessionOrBreak] = useState('Session')\n  \n  const audio =  document.getElementById(\"beep\");\n \n  const handleBreakDown = () => {\n    if(activeCountdown) return;\n    if(breakLength > 1){\n      setBreakLength(breakLength - 1)  \n    }\n    else return;\n  }\n  \n  const handleBreakUp = () => {\n    if(activeCountdown) return;\n    if(breakLength < 60){\n      setBreakLength(breakLength + 1)  \n    }\n    else return; \n  }\n  \n  const handleSessionDown = () => {\n    if(activeCountdown) return;\n    if(sessionLength > 1){\n      setSessionLength(sessionLength - 1);\n      setTimerLengthMins((sessionLength -1).toString().padStart(2, '0'));\n      setTimerLengthSecs(\"00\");\n    }\n    else return;\n  }\n  \n  const handleSessionUp = () => {\n     if(activeCountdown) return;\n     if(sessionLength < 60){\n      setSessionLength(sessionLength + 1);  \n      setTimerLengthMins((sessionLength + 1).toString().padStart(2, '0'));\n      setTimerLengthSecs(\"00\"); \n    }\n    else return; \n  }\n  \n  const handleStart = () => {\n    setActiveCountDown(true);\n  }\n  \n  const handleStop = () => {\n    setActiveCountDown(false);\n  }\n \n  const handleReset = () => {\n    setActiveCountDown(false);\n    setBreakLength(5);\n    setSessionLength(25);\n    setTimerLengthMins(25);\n    setTimerLengthSecs(\"00\");\n    setSessionOrBreak('Session');\n    audio.pause();\n    audio.currentTime = 0;\n  }\n  \n  //This is the code for making the clock run and switch from session to break \n  useEffect(() => {\n    let interval = null;\n    \n    if(activeCountdown && sessionOrBreak === 'Session' && timerLengthMins === \"00\" && timerLengthSecs === \"00\"){\n      setTimerLengthMins(breakLength.toString().padStart(2, '0'));\n      setTimerLengthSecs(\"00\");\n      setSessionOrBreak('Break')\n      audio.play();\n    }\n    \n   if(activeCountdown && sessionOrBreak === 'Break' && timerLengthMins === \"00\" && timerLengthSecs === \"00\"){\n      setTimerLengthMins(sessionLength.toString().padStart(2, '0'));\n      setTimerLengthSecs(\"00\");\n      setSessionOrBreak('Session');\n      audio.play();\n    }\n    \n    if (activeCountdown && timerLengthSecs === \"00\"){\n        interval = setInterval(() => {\n        setTimerLengthSecs(x => x = 59);\n        setTimerLengthMins(x => (x-1).toString().padStart(2, '0'))\n      }, 1000)\n    }\n    \n    if (activeCountdown && timerLengthSecs !== \"00\") {\n      interval = setInterval(() => {\n        setTimerLengthSecs(x => (x-1).toString().padStart(2, '0'));\n      }, 1000)\n    } \n    \n    else if (!activeCountdown) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [activeCountdown, timerLengthMins, timerLengthSecs, audio, breakLength, sessionLength, sessionOrBreak]);\n        \n  return (\n  //this ternary changes the background colour by selecting the different container styles based on state  \n    <div className=\"container\" id={activeCountdown && sessionOrBreak === 'Session' ? \"container2\" :  activeCountdown && sessionOrBreak === 'Break' ? \"container3\" : \"container1\"}>\n      <h1>FreeCodeCamp/Pomodoro</h1>\n      <div id=\"break-session-container\">\n        <Break breakValue={breakLength} breakDown={handleBreakDown} breakUp={handleBreakUp}/>\n        <Session sessionValue={sessionLength} sessionDown={handleSessionDown} sessionUp={handleSessionUp}/>\n      </div>  \n      <div id=\"timer-container\">\n        <Timer title={sessionOrBreak} timerValueMins={timerLengthMins} timerValueSecs={timerLengthSecs} startStop={activeCountdown ? handleStop : handleStart } startStopText={activeCountdown ? \"Stop\" : \"Start\"} reset={handleReset} />\n      </div>\n    </div>\n  )  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}